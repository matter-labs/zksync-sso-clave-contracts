// SPDX-License-Identifier: GPL-3.0
/*
    Copyright 2021 0KIMS association.

    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).

    snarkJS is a free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    snarkJS is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
    License for more details.

    You should have received a copy of the GNU General Public License
    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
*/

pragma solidity >=0.7.0 <0.9.0;

contract Groth16Verifier {
  // Scalar field size
  uint256 constant r = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
  // Base field size
  uint256 constant q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;

  // Verification Key data
  uint256 constant alphax = 16428432848801857252194528405604668803277877773566238944394625302971855135431;
  uint256 constant alphay = 16846502678714586896801519656441059708016666274385668027902869494772365009666;
  uint256 constant betax1 = 3182164110458002340215786955198810119980427837186618912744689678939861918171;
  uint256 constant betax2 = 16348171800823588416173124589066524623406261996681292662100840445103873053252;
  uint256 constant betay1 = 4920802715848186258981584729175884379674325733638798907835771393452862684714;
  uint256 constant betay2 = 19687132236965066906216944365591810874384658708175106803089633851114028275753;
  uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;
  uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;
  uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;
  uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;
  uint256 constant deltax1 = 17628129394831411210399986371198559882994161152582168284785729461013183358184;
  uint256 constant deltax2 = 7166314853927862341691158985057270282833413469445710880185540725449631687121;
  uint256 constant deltay1 = 20154869769384405310203981603495861822067475494360678744567051288690959647141;
  uint256 constant deltay2 = 11095985985395488776600909709727411131428655520477262147949799111191581810092;

  uint256 constant IC0x = 6093239204057318135600436973644089095602631057618989108476579285115782124223;
  uint256 constant IC0y = 11530774415286381806503670199171722425926693370207321715749302375072224915313;

  uint256 constant IC1x = 15279864132197551563107979869980355836491124764561940191220534782374530285608;
  uint256 constant IC1y = 15135342970492127668395411032251759914194674800502660259001274011154267976116;

  uint256 constant IC2x = 5004965141248393888219008288355380908071729016974638736664810848109093525839;
  uint256 constant IC2y = 7851197160622554056447294033162057070265745581139207692752800145605535000884;

  uint256 constant IC3x = 2398607899283903558446315737689532896691281922606595185553106049194303057395;
  uint256 constant IC3y = 6563246391602912797340734660907515283937587708547719302925148916522503034116;

  uint256 constant IC4x = 17704867663854716988735279264578116002494048322771546833844673981129196238611;
  uint256 constant IC4y = 3377776010783520965399198805131502764388606243579556030295660224451422284806;

  uint256 constant IC5x = 20872572144565561052472942773412411789070413498981533490603021174849747793709;
  uint256 constant IC5y = 2629365879406383680242580726579261787118247620662756456744593704281178080085;

  uint256 constant IC6x = 16307694842957463585158510842767685966590332753358398598513112418977906554057;
  uint256 constant IC6y = 3121587532262756567083989305365329081068143756781387967438542227967490523708;

  uint256 constant IC7x = 4611946905758627338589315410013407007186588865106558212655235412189246351271;
  uint256 constant IC7y = 13657570637982438894422673919044658544092685314519762540961069227821771044614;

  uint256 constant IC8x = 7666256288751744928002842088380192710195084374963258083732037693949756949918;
  uint256 constant IC8y = 8515745129258131782670140379951353192117630900896923642097940729853390732978;

  uint256 constant IC9x = 6835857798971949279037338392097906922704980327782413686353395113640643416786;
  uint256 constant IC9y = 15402206597314794218236431094478956449133029898576704137446082923442159703992;

  uint256 constant IC10x = 21779640990472641236170483741976658158531869032161563229584420300475966935423;
  uint256 constant IC10y = 3529300524829240543440753331686180063140076944750932554046104938325956059399;

  uint256 constant IC11x = 10173879770266009096701124401781395811990381723132416763973789490741288508604;
  uint256 constant IC11y = 13311117193822060316570400472630846917484149449161466223869437707789281341447;

  uint256 constant IC12x = 12298952484203395400735022982554921986398992520090253671929408420805828019585;
  uint256 constant IC12y = 6338131985049878954874559500530886746757410049041630175390918060068233857906;

  uint256 constant IC13x = 20356878148066118318675854367093071180674182827981195140877346459429116703696;
  uint256 constant IC13y = 12387272237034702834774175245349746996977026167255603120342704504457990529638;

  uint256 constant IC14x = 6700732654079082724538329851818836498153158134714515347135623294133895066593;
  uint256 constant IC14y = 8798259633706651421326778856870318597441098256309356585850745548577625379007;

  uint256 constant IC15x = 8404747761834771038602093065318682297150412247858178793451003564429894150171;
  uint256 constant IC15y = 13345636875656910983602309068854047727026866289703417150210299121236887540777;

  uint256 constant IC16x = 192060067381519942969754940836530666863181002399381635421944205289614315246;
  uint256 constant IC16y = 14787033373462956625052010824006604778427393486457693004216070358954224470666;

  uint256 constant IC17x = 5015208090492125024010845815720695340791811140792777587318639638615343560497;
  uint256 constant IC17y = 16968589574188695069901976269827633794370916334310978114259038891991171690333;

  uint256 constant IC18x = 4779764133276224947113944337798022897586518943017274971920459592170931914292;
  uint256 constant IC18y = 4087359996223329792719820704348211188990446855610384571753690215942415768132;

  uint256 constant IC19x = 11970656739269420603471544051981891540098806564500833344980876679842353693387;
  uint256 constant IC19y = 4920629228307067219801688860476676276359395076025417732275402786104762589468;

  uint256 constant IC20x = 2554331638431128338421557982133198746978005506372533975118686036783659563753;
  uint256 constant IC20y = 11407133204372004067462471102107297927866407986356032580213658877802833938656;

  uint256 constant IC21x = 6527763736607218868455981610546390689318842851266391231106026697511217018775;
  uint256 constant IC21y = 221757170883558839737443182333822884757972570875669844433952761769948058216;

  uint256 constant IC22x = 16817876477523419685753854840882849099059892583775836560548411390363917126250;
  uint256 constant IC22y = 20489939411043854344659629455860435397433214105241463815272322893958686525955;

  uint256 constant IC23x = 5398341793349142085350670985152439598249152444752382780339429849499223851653;
  uint256 constant IC23y = 9807743625019829302373858525992346792928422895052521412218708476146845536353;

  uint256 constant IC24x = 12386615487153542235428857518728106940978587026192194280295771623381268832404;
  uint256 constant IC24y = 4233442923282836707847364319234593064161733594895672525103913214480022574245;

  uint256 constant IC25x = 8162581133262267927395345171686450593847425759030909814172118447468740731845;
  uint256 constant IC25y = 3231591714827600996938164158949457021120989735214162714062470527073359698565;

  uint256 constant IC26x = 11646735728304065377327258688826626035707331364693324599359773347202213346605;
  uint256 constant IC26y = 19442958449873364632521524525424661831666938540045856401617883504286351302383;

  uint256 constant IC27x = 10147499952330106368044265178640946275571335839268769119511664299074086858009;
  uint256 constant IC27y = 6790566110758997481819081952849101065833807417440041229712925546405738761226;

  uint256 constant IC28x = 16875064034197162719374337242079364363656520268017891626310511287599667148305;
  uint256 constant IC28y = 17515236656805057849609477309567592817011229640548503822652870949496991451888;

  uint256 constant IC29x = 6175026484788059520616673093463173336273455407323600082440821508214430945849;
  uint256 constant IC29y = 14052823701744027435573516611410627298587032915173889869472201151916197740740;

  uint256 constant IC30x = 2723150213029914950283056132550752646978336133725384975072389913994283048071;
  uint256 constant IC30y = 19257565174158555560378471577084418820351438772499284853874343015497860043856;

  uint256 constant IC31x = 12213183788475062531693083885403383665138420340593029333431792399850051600378;
  uint256 constant IC31y = 14898425069612051561200329116394405692768083120030392564128527839760505565749;

  uint256 constant IC32x = 6997190841168975822015622894614437717923636948130665611469407265802646309810;
  uint256 constant IC32y = 15512009240290974909210626494777676060019594453060772294803270600735698174784;

  uint256 constant IC33x = 7880518240034555771860193371913665835259465519561286965129316970781751102230;
  uint256 constant IC33y = 7122236529997596931853959845287900008986563979387564083348481805575432413939;

  uint256 constant IC34x = 12424756615170473687905593754923746936713037703724577956702378991858896144422;
  uint256 constant IC34y = 4599210057695286243698080846569456323336237570879240304544469892708929108023;

  uint256 constant IC35x = 17569101593378338702978872709586198894924351848523279681211149132327189264405;
  uint256 constant IC35y = 7919582704364927056769015833992108724366367495923492892077618690131327936568;

  uint256 constant IC36x = 17413118930673746431366185445812066731200947377456593982414743621574024183788;
  uint256 constant IC36y = 8173239694748411892796797664697355924013059479150086516823204247440421962961;

  uint256 constant IC37x = 15081658668080748166696887433732165935276033796927887607704526304998543946040;
  uint256 constant IC37y = 14300676845762375793356925327095191116966544652264133477600818311260210404903;

  uint256 constant IC38x = 12860835571361523755690129690644295849166243934618463613842305968099513494575;
  uint256 constant IC38y = 338767608462777119526893477916953853945993021454425396415561266861677347642;

  uint256 constant IC39x = 2636158855296563629746867031543736083395895800491471905746927101984012807213;
  uint256 constant IC39y = 5796946882780643029192071836563070172933566697236833611562929863437613390149;

  uint256 constant IC40x = 4122965932414062878330495303870161670555163159522805410573761729193892969304;
  uint256 constant IC40y = 8578854666838857908339125314037960545405502614774438985087005218409005567199;

  uint256 constant IC41x = 6813213679049039763533502286191535765159523316046009911933480859980012978305;
  uint256 constant IC41y = 17558353809365836056197875826457459141095351293167942333771520997504720426171;

  uint256 constant IC42x = 16645107399248741930880511227465652358296120373354639943872594325056772521681;
  uint256 constant IC42y = 498499870837664928286248204779734252974241547233442090291845216711151683196;

  uint256 constant IC43x = 18495966340818644093792290866890524653454245498504057627055389823331497605160;
  uint256 constant IC43y = 5335506549935280223186548472984468278095035819394025357398166109147972288575;

  uint256 constant IC44x = 20683743317921170711416491476988590610257211179820486690007895264255831784469;
  uint256 constant IC44y = 15379243558204082388762322143212658276798131698911629569253509096071986979362;

  uint256 constant IC45x = 14301576144660981132613464299963011951175778474138840916891585551124354257460;
  uint256 constant IC45y = 21644252903837882967171509135786964622820552579705796747078342242284848051044;

  uint256 constant IC46x = 14919551160902397826323631816186482750545077169576621309500789123745412604511;
  uint256 constant IC46y = 1002983360728371507148555007742116204596838896320855598510235460807623262490;

  uint256 constant IC47x = 19179422810390564663584818738188607374022384923236617654991793240911064244086;
  uint256 constant IC47y = 3261211546556583027217104179706774539784836051278790287705233152307877150227;

  uint256 constant IC48x = 2770841184455790824726810665489396139580621340258867510500820366166943936926;
  uint256 constant IC48y = 6069568942422117968665166706964251735247255148432388289667455381027190230212;

  uint256 constant IC49x = 9464284771570969242318212855061472006626036293890063426567245863304976861348;
  uint256 constant IC49y = 8252499945531878563517587370957804719747736853264439134945468884770426852026;

  uint256 constant IC50x = 14187552465212213819359725870521206616581890824434817680944901883057312649240;
  uint256 constant IC50y = 19417419609216313688798555169267042347261942365603946022688634508335377724356;

  uint256 constant IC51x = 21010368616256140702384870978068449461406018700489042438493787398034124480349;
  uint256 constant IC51y = 20201837490834317894027190796354420623374733017897284272688138830390003306803;

  uint256 constant IC52x = 9165264037233841650003173287208698426982912830306128927033161289730278646945;
  uint256 constant IC52y = 3888333368752801980149612243147338845518640269543459225320595165669452519461;

  uint256 constant IC53x = 14201918406811043173051275268649016074576262517749677144395255835660550137884;
  uint256 constant IC53y = 11162248456513237941373592281435115364543956247186683271570248862105788432584;

  uint256 constant IC54x = 4259664599583639308864890942652261820137569664011959632980701135523089260188;
  uint256 constant IC54y = 10183455983078003784371010505830503060628157256720409257135619562266298354159;

  uint256 constant IC55x = 18947960083211581570794843751908493916051639441003327895312352766428683163584;
  uint256 constant IC55y = 10440303969976308877253439327016459169883809808984034003611170693298184945540;

  uint256 constant IC56x = 19963432558406430983754511432769808342559852268776248801878304435500628064085;
  uint256 constant IC56y = 12381854810407592706592061207290950616308073080067473350686707253122925473903;

  uint256 constant IC57x = 1253951735842553963079394381288621835312652310787560454130729330412758550473;
  uint256 constant IC57y = 7715135847637429488191008225479091236119049813138291013857506062699425951334;

  uint256 constant IC58x = 17775252336514978798503874990097157425300277534922440677844214432167065465801;
  uint256 constant IC58y = 20333274921390769991767387341427323672852968993069417857521041487389525868265;

  uint256 constant IC59x = 17224028864956607413421374442415364468480057749590494573805687095100638608803;
  uint256 constant IC59y = 3458687010407284732156576241633387886172982187026394082964882293230950217717;

  uint256 constant IC60x = 5674503893704029775157246778286633974557700041457799631278192177011541415769;
  uint256 constant IC60y = 14741878827911794011597514193603194663613493670946774599213512811469012485483;

  uint256 constant IC61x = 8028094379972841550058814708810763205548268497878210680782374121733225461881;
  uint256 constant IC61y = 21769876470225802733308079050682870484784567734698359802758026930347882393268;

  uint256 constant IC62x = 4102812157705843920066305970773360735646260146155944574445905749163731112171;
  uint256 constant IC62y = 3034075225627061818573554322778278690597188698409912554384625209801676837179;

  uint256 constant IC63x = 18710728215888043734384074918803540210083769263841549464350217963520504740802;
  uint256 constant IC63y = 21361903899105773196631823083105910918256049882147323336802373109252415560041;

  uint256 constant IC64x = 14547479902498483393101182088649594914907866437711696321811268454455674472304;
  uint256 constant IC64y = 6462904554710238497519872559841094019995553877849705484187204435869105601446;

  uint256 constant IC65x = 12961980235399283520275699575563369401226743459515870460316200602336063065021;
  uint256 constant IC65y = 1782273223005732720086207344689029037832409638412370208455380196115067226230;

  uint256 constant IC66x = 4118718819382631645209568910881765180897937613067639053813179168041994399037;
  uint256 constant IC66y = 1902285555546090164238513739507919787662725377852495017262095666343116860439;

  uint256 constant IC67x = 1477066824600515202236657649999990059187544369654620436010821967833220160315;
  uint256 constant IC67y = 8641102226572590258177808095998233794142000073386505561533412279046369531655;

  uint256 constant IC68x = 16064891165015205017054724631496419281655290058534500460062344360908108099891;
  uint256 constant IC68y = 1115920884400365320961991370229407576136483586635222002195460975838632026730;

  uint256 constant IC69x = 4873939288643927566320832391050131962658789706330497079045334824574728823784;
  uint256 constant IC69y = 17581948750145019689423681170974643060302143719834026609289508959588201121626;

  uint256 constant IC70x = 15073982792956397542972087119661117193587770747349534575212814630932418664028;
  uint256 constant IC70y = 12765977300618357824330943390220970312578946022271225916763456156495368539100;

  uint256 constant IC71x = 9798753261287090193774046184772060221893396873330885843158693734206975569218;
  uint256 constant IC71y = 16210771229120978121945506180488406603813559329986686251778312590496416570993;

  uint256 constant IC72x = 15363193267621930907512330406622781166082375931786916689344023526462785283107;
  uint256 constant IC72y = 20475833509438968400208776677180274965663238476317700895700772690454936100684;

  uint256 constant IC73x = 20620011149867234187304619620133611734913087505057178778204875567385081595824;
  uint256 constant IC73y = 18301935080820007884994205479082996960676415636047529764196467488161875318548;

  uint256 constant IC74x = 15566667011534880471345607789136731723979325166502223429077445201719273806694;
  uint256 constant IC74y = 16793410378455921147022771341867520468828539884951561844221434585818710236571;

  uint256 constant IC75x = 21215790386298863409074341179948063959758268104356621539707121872437632251106;
  uint256 constant IC75y = 10042818173398428088821853117750991438177388507781587404344189229672769070247;

  uint256 constant IC76x = 12177890937418410515779805099758611325572713990601213387205987979075353877728;
  uint256 constant IC76y = 12133161711700922080147571302222938435036298792189983207340938629709749926744;

  uint256 constant IC77x = 12177825639565936218401770183770081920314454214580658290300077634121527290917;
  uint256 constant IC77y = 2725474172738615043227663401464520546935676266923918178898748543650794632770;

  uint256 constant IC78x = 8003218237199797105505355484839285940909922333913995327884324582188640662240;
  uint256 constant IC78y = 14403072778152258197815655285658129450511350074278347758487201238348025393708;

  uint256 constant IC79x = 6435181894552773678397517591069269078111206167550635735953877192293990599324;
  uint256 constant IC79y = 16219441689787567079744629465440293760637927124538689787996845730081299580534;

  uint256 constant IC80x = 10452619493031973656420060518955906053934635660427046199472672349826701118602;
  uint256 constant IC80y = 146353815966169436743799269794154643150515393065607006668379205899404074940;

  uint256 constant IC81x = 3729543536183663523769085532996918808605618964085649262073960031104095785689;
  uint256 constant IC81y = 21844226204877080502614369185450697929754290573853542951749000650110434517208;

  uint256 constant IC82x = 12743640154458262920831264064431384102085913240802862429180300116093188310126;
  uint256 constant IC82y = 21113769605219939662841289058216609304292462906358173058601676016183404140739;

  uint256 constant IC83x = 279343334556985970391049914368785825069115764755327608112384019705974053055;
  uint256 constant IC83y = 12896939069901763628978680133931327295746956845331929318892091721139274870898;

  uint256 constant IC84x = 14810645342484090145609362405005992687740041522964142854646576509062997361186;
  uint256 constant IC84y = 6010758943952886630386307536302579295101901000026826022238586894688122236550;

  uint256 constant IC85x = 18730410192689230409700362387658600675815312552384881554825602397643038768493;
  uint256 constant IC85y = 16641857679911826853145149099757750818528436114602507946108462240050817262400;

  uint256 constant IC86x = 12565077262653825695390878799510000632858285161726950458669425281561328623265;
  uint256 constant IC86y = 10821166688932569000685378637438036839936358794367965557743710982401779659504;

  uint256 constant IC87x = 12302731500329889720849791986455911534804780061186268183809009618575772728797;
  uint256 constant IC87y = 2042087398353764478971435017613926495439461063402437468085646062305554286616;

  uint256 constant IC88x = 4053962507755807085619618727531831006737077805357401327120896629450942991410;
  uint256 constant IC88y = 19432324660906913081784086647301395357494967321051681905752425683096928175224;

  uint256 constant IC89x = 4085462403886963820253609858550287822771165473967531436343578009104771368141;
  uint256 constant IC89y = 10173463619690493115857512447492836218329672581127853242066711468285601994939;

  uint256 constant IC90x = 15958790852513570422558390874794595946916371259537810433310132235242687457832;
  uint256 constant IC90y = 15252028968413440732578067557137351236565425200525751359151857204240757508679;

  uint256 constant IC91x = 7866785996148951305542795855093087290403857997467966962480881449020282126188;
  uint256 constant IC91y = 15013059760228244950270136518710218039200529957939213104260953009021691501205;

  uint256 constant IC92x = 3627392879917909971347502346550112726903422350199670493796838697694100763244;
  uint256 constant IC92y = 11138130619481852451624341218372137047398042496170658391920188864590150817421;

  uint256 constant IC93x = 20668867663680435094269069960726523890893300768648694365574375077092157891159;
  uint256 constant IC93y = 6312365898669813414746911279776877449145749547217039979301643264299887046105;

  uint256 constant IC94x = 352571560780472054761965420903648035892023417082986721403312902559030140595;
  uint256 constant IC94y = 1981620485952910884936027578354829128193283693308975833933029516334558429656;

  uint256 constant IC95x = 5869064084390208106408954065187668086540518347802337956790747727425715218935;
  uint256 constant IC95y = 20787537944307811952150908444688681934764221151249911514706899618142073367454;

  uint256 constant IC96x = 10147768503093986356458133594184067748588000375306386174831881658671889168500;
  uint256 constant IC96y = 8553592998536791979371634191626041347969877218354735268799296689119186031549;

  uint256 constant IC97x = 1360104148612855274465553689684185553022480335229911191285109499976179933689;
  uint256 constant IC97y = 9311315724556613469511334886520029865906626783590652576831764947194082609381;

  uint256 constant IC98x = 3518803899715443485680046576347556201677875999547376201757739477222210731908;
  uint256 constant IC98y = 14115072413163608057610235157850392104587610156622565478419215148503822939580;

  uint256 constant IC99x = 3601691684265734958320017201767223538117975108380869096021504843293747579584;
  uint256 constant IC99y = 2336098140424065437620121811099018812939532571917062040463132587439581259724;

  uint256 constant IC100x = 8083109714703099231110806788124274320564858429529893341161962453951703411897;
  uint256 constant IC100y = 5519677489078199186419272875571803449981987248688692622250741220638413719032;

  uint256 constant IC101x = 16650828262410967047543417679570740284868239894228966999131038431088195268360;
  uint256 constant IC101y = 11756443077625807385495337453612190631933314567262473500051254771547319165031;

  uint256 constant IC102x = 19006253363008569610981203771993353971484890575789349870886243252639646544812;
  uint256 constant IC102y = 18311254312561787803866841144232185010374116638513284597319618211388534841425;

  uint256 constant IC103x = 9841760700341634742925702386187102172043836246130236288050092892580666006829;
  uint256 constant IC103y = 6266502644999915428930375400831324034561075625752734625843768209168908860827;

  uint256 constant IC104x = 16225732799473874251251466259031972648615449879253832082415461739422697113161;
  uint256 constant IC104y = 15276904821218324692339785871822453086764177997289211220916654955823938520604;

  uint256 constant IC105x = 20815588203076348912137112976140109669726689668726217015821812302013216944513;
  uint256 constant IC105y = 5983269354063220600816158184069801385116056270250160942045920828166077314221;

  uint256 constant IC106x = 18082462991393459840898533221838421666570086278274760443541228555191164527042;
  uint256 constant IC106y = 2173886863654025544901299865299263470376894776088607402861704058270123788411;

  uint256 constant IC107x = 14258520508760198587234129874512139581098026041962044402783813854847766887789;
  uint256 constant IC107y = 13803046724711230738696294763605132819655764432781597048749097921413598848421;

  uint256 constant IC108x = 10078750289554875174825609471415294342522800888059957385174333416633513149190;
  uint256 constant IC108y = 11340600081645511222327816292142932439625401242796782672734077611060000422902;

  uint256 constant IC109x = 4396413551906356274500861284803683204466630985264048039461415901363465422423;
  uint256 constant IC109y = 19350794385532342103402673069379746731916449207528414000937189936191219756921;

  uint256 constant IC110x = 17594868599499094489768266177951232221367411999466725456995719326510481370082;
  uint256 constant IC110y = 10591324512550551468226085274804944807340836925105520915620256264664187687642;

  uint256 constant IC111x = 8300010971033095094071648224012928282940288814733490935217792276734597192808;
  uint256 constant IC111y = 5042429119497166790074358871859947990588409274579676556937532096647598520779;

  uint256 constant IC112x = 20011477831461521467684094482345316330847156506889472702960259176812939486555;
  uint256 constant IC112y = 16982838276964052711740142964025384931055807446537877839100570679698177563321;

  uint256 constant IC113x = 14773237432025406529247784006349390294216030038907518578764305707508867315773;
  uint256 constant IC113y = 10186776957150283184739764810335438896030305278904399994023476182727143526363;

  uint256 constant IC114x = 18538065949779656518598393457077587743402936279491397561601894415125015397121;
  uint256 constant IC114y = 20958730107675795143184707232953352386600104386273760461617096494610012293196;

  uint256 constant IC115x = 9786056084474269970231429057418951596868097241673288537490766494621064633932;
  uint256 constant IC115y = 3000364620328468875926367274936098169785570092366991755283834434151645319656;

  uint256 constant IC116x = 16258478088986804634816624563326907984134234676035789352337950117228884185264;
  uint256 constant IC116y = 13434779456355083409823208670404941190633859710895305988048766846488436920488;

  uint256 constant IC117x = 33191324431694994597504238111214102628310730033951049817898774833939114869;
  uint256 constant IC117y = 20924053089362314094308128706458043055797265460117916495683117345041540437552;

  uint256 constant IC118x = 14945166421839594919590872136633997021191444390332389698616265534194182405918;
  uint256 constant IC118y = 19734583622525128477514264188152853574334345515214035909941312765418142891048;

  uint256 constant IC119x = 1217970717570900091105753309568379425294505855928535306594573783962855458978;
  uint256 constant IC119y = 15976936701007896512264381925082018019351373808968034014009614896914011672346;

  uint256 constant IC120x = 11938363345198631842983876197948486091295225495557670920315221106243771864510;
  uint256 constant IC120y = 5313171443413095727743617886834511201017516569530869747135552358112696356869;

  uint256 constant IC121x = 16209369300711422255017495398618889128382194113137069470723525155653519152692;
  uint256 constant IC121y = 2993868624165212483977577352511071060811376576959889097619811923025714383456;

  uint256 constant IC122x = 12917470640919358820869962987665781629311556487181580760844936949245624548762;
  uint256 constant IC122y = 196334178302351198846862313512977471339074015805236831257267315498915498987;

  uint256 constant IC123x = 6274683665885856628485284833246993066371825178509308441742318432549752138454;
  uint256 constant IC123y = 19733373554559115018278013012076107432560414688903139446378531945833227063150;

  uint256 constant IC124x = 11633214950029248587147393276605940201146079544604225070366343780636681778464;
  uint256 constant IC124y = 13299700758607224339407602550299451436796739526215788543370576592169630847770;

  uint256 constant IC125x = 5649234948035317961270373511460287002697112331929357788884312760390661617118;
  uint256 constant IC125y = 21649983088908488611540594532616857898127151134130009016717322163965212650988;

  uint256 constant IC126x = 15709881251267250585457131803963952206045295311372508800393780537402624023896;
  uint256 constant IC126y = 9818952591550396797658949422090128417621757237605665221607590025126636366385;

  uint256 constant IC127x = 14138763925287827654648542925090968200460074267991390889742560731774245842799;
  uint256 constant IC127y = 19455801090384212506853468183160993877923607054093577587015338582118729113810;

  uint256 constant IC128x = 15112406527960303693475376139621104722115236641479484137444315364303594824731;
  uint256 constant IC128y = 6965870037262732866964085986022892655200148846881182689168211475226180529664;

  uint256 constant IC129x = 19489565456106755396211780438001738100494021174682902798254809799037593134006;
  uint256 constant IC129y = 10142008278884636334089135489468689164275032101581934313375907213290623542454;

  uint256 constant IC130x = 3927260499481598846057763958154125881743219185202538538552444369821720352001;
  uint256 constant IC130y = 4435571840670703036962308524240686745887096134180165221357311850265863846931;

  uint256 constant IC131x = 2869089428833831852245873743946955646043897074920872841362640041037341592130;
  uint256 constant IC131y = 14731003619485279561237249246234283351477777628436720401304399058388607442136;

  uint256 constant IC132x = 10925444527252940624065757218988348695153563915676654095780220989588542561270;
  uint256 constant IC132y = 3557589339797943691919172710732408011302979128856968026097220705880340976582;

  uint256 constant IC133x = 9494237217598337232163243543772999507049440996409066347591769154927012802023;
  uint256 constant IC133y = 10392244932674584863881048303749322071974643397769282815984523853558409623512;

  uint256 constant IC134x = 1895236690206482169982925146797586738209234745463317004635308889385485231202;
  uint256 constant IC134y = 17785589528126385566244993909547153096084704929869317641262595750964967993315;

  uint256 constant IC135x = 13456567078642910862972835358493938238036886031897860925218678478059868930347;
  uint256 constant IC135y = 7394766569982027660271982879532711980635320425561188157093072431614618865894;

  uint256 constant IC136x = 3920141628029933461181960486907289271966506363831581880220023162727441502705;
  uint256 constant IC136y = 5651994443225955741843535476207948968272244203050312888113444468845773614277;

  uint256 constant IC137x = 2435062922998772663246614962194625832168654365742271136904715148141154635966;
  uint256 constant IC137y = 13750294685329000936912197785646420012205810479999702819206227522846570013557;

  uint256 constant IC138x = 1722153507901968896765816213940110978999036352523474452441454442199340876845;
  uint256 constant IC138y = 10279139313862032778665156401384894645060973486146860159579030585592612531482;

  uint256 constant IC139x = 5473619268737380094303763960551963076377436533911213258913464184356804678362;
  uint256 constant IC139y = 12997358397949555793369884730533528237952883424467925681524295678196991503774;

  uint256 constant IC140x = 12534884235927549467685501161002255862086203212129933806064925118531399849678;
  uint256 constant IC140y = 1871852331151212577175162055035602186311165907704637806059801324731584487732;

  uint256 constant IC141x = 2113674900324266546753474278516024281155039753840019442075645310848638184199;
  uint256 constant IC141y = 12671854574559861928447718732725405345261485961618513992630780707510535550972;

  uint256 constant IC142x = 15795536226720699841069448361173111447563558993152535743978914937931777224306;
  uint256 constant IC142y = 21767291214872507543806998524173158401194069848803614617288485489028392381848;

  uint256 constant IC143x = 12376502208349929037718284212954690102446242290079463897288410769257033228692;
  uint256 constant IC143y = 10527327354085136837045870287559673261301571277732745426172564087953595067955;

  uint256 constant IC144x = 21385020092416885751450254532653288131403485223156152779710858202342920322039;
  uint256 constant IC144y = 19449341675555293872073589461404284240262729991562582094582528092883581339703;

  uint256 constant IC145x = 6912999089628321036034489530494049956039472844699786228797335702236169221021;
  uint256 constant IC145y = 19642284528648280812824135179167690961432144812385587218478955831975235473919;

  uint256 constant IC146x = 10127045764922627748677558741373138689792017600568962294859806492188629993326;
  uint256 constant IC146y = 8819147479005444856951932106718098349057148128955684439946666732539421457362;

  uint256 constant IC147x = 7499641668361472305717082908594212556207458950494794612138535675722379114720;
  uint256 constant IC147y = 9872500488048432361392189371551645289603231878916478040011260444627134926419;

  uint256 constant IC148x = 155337535590738963853072484268602018499871576359174099734240322481801365642;
  uint256 constant IC148y = 1333949877294630838281274812009882418387855789811169455126554441591819799488;

  uint256 constant IC149x = 4981768131454252459586836496184722913844754194634139418867584681978005754312;
  uint256 constant IC149y = 3095761550098595971560257461967081255589378938068827883244326602382327177559;

  uint256 constant IC150x = 17971185471545629384121217941615231484566255959930057028139061185956630840620;
  uint256 constant IC150y = 10507842441794989447148465576333431612563435653196133717649592469278004698381;

  uint256 constant IC151x = 19477771926649493563219952104035123953669581747423874684958521529626938664197;
  uint256 constant IC151y = 10604276412664861825275620101540225985602867705103443357363699569594444878010;

  // Memory data
  uint16 constant pVk = 0;
  uint16 constant pPairing = 128;

  uint16 constant pLastMem = 896;

  function verifyProof(
    uint[2] calldata _pA,
    uint[2][2] calldata _pB,
    uint[2] calldata _pC,
    uint[151] calldata _pubSignals
  ) public view returns (bool) {
    assembly {
      function checkField(v) {
        if iszero(lt(v, r)) {
          mstore(0, 0)
          return(0, 0x20)
        }
      }

      // G1 function to multiply a G1 value(x,y) to value in an address
      function g1_mulAccC(pR, x, y, s) {
        let success
        let mIn := mload(0x40)
        mstore(mIn, x)
        mstore(add(mIn, 32), y)
        mstore(add(mIn, 64), s)

        success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)

        if iszero(success) {
          mstore(0, 0)
          return(0, 0x20)
        }

        mstore(add(mIn, 64), mload(pR))
        mstore(add(mIn, 96), mload(add(pR, 32)))

        success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)

        if iszero(success) {
          mstore(0, 0)
          return(0, 0x20)
        }
      }

      function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {
        let _pPairing := add(pMem, pPairing)
        let _pVk := add(pMem, pVk)

        mstore(_pVk, IC0x)
        mstore(add(_pVk, 32), IC0y)

        // Compute the linear combination vk_x

        g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))

        g1_mulAccC(_pVk, IC2x, IC2y, calldataload(add(pubSignals, 32)))

        g1_mulAccC(_pVk, IC3x, IC3y, calldataload(add(pubSignals, 64)))

        g1_mulAccC(_pVk, IC4x, IC4y, calldataload(add(pubSignals, 96)))

        g1_mulAccC(_pVk, IC5x, IC5y, calldataload(add(pubSignals, 128)))

        g1_mulAccC(_pVk, IC6x, IC6y, calldataload(add(pubSignals, 160)))

        g1_mulAccC(_pVk, IC7x, IC7y, calldataload(add(pubSignals, 192)))

        g1_mulAccC(_pVk, IC8x, IC8y, calldataload(add(pubSignals, 224)))

        g1_mulAccC(_pVk, IC9x, IC9y, calldataload(add(pubSignals, 256)))

        g1_mulAccC(_pVk, IC10x, IC10y, calldataload(add(pubSignals, 288)))

        g1_mulAccC(_pVk, IC11x, IC11y, calldataload(add(pubSignals, 320)))

        g1_mulAccC(_pVk, IC12x, IC12y, calldataload(add(pubSignals, 352)))

        g1_mulAccC(_pVk, IC13x, IC13y, calldataload(add(pubSignals, 384)))

        g1_mulAccC(_pVk, IC14x, IC14y, calldataload(add(pubSignals, 416)))

        g1_mulAccC(_pVk, IC15x, IC15y, calldataload(add(pubSignals, 448)))

        g1_mulAccC(_pVk, IC16x, IC16y, calldataload(add(pubSignals, 480)))

        g1_mulAccC(_pVk, IC17x, IC17y, calldataload(add(pubSignals, 512)))

        g1_mulAccC(_pVk, IC18x, IC18y, calldataload(add(pubSignals, 544)))

        g1_mulAccC(_pVk, IC19x, IC19y, calldataload(add(pubSignals, 576)))

        g1_mulAccC(_pVk, IC20x, IC20y, calldataload(add(pubSignals, 608)))

        g1_mulAccC(_pVk, IC21x, IC21y, calldataload(add(pubSignals, 640)))

        g1_mulAccC(_pVk, IC22x, IC22y, calldataload(add(pubSignals, 672)))

        g1_mulAccC(_pVk, IC23x, IC23y, calldataload(add(pubSignals, 704)))

        g1_mulAccC(_pVk, IC24x, IC24y, calldataload(add(pubSignals, 736)))

        g1_mulAccC(_pVk, IC25x, IC25y, calldataload(add(pubSignals, 768)))

        g1_mulAccC(_pVk, IC26x, IC26y, calldataload(add(pubSignals, 800)))

        g1_mulAccC(_pVk, IC27x, IC27y, calldataload(add(pubSignals, 832)))

        g1_mulAccC(_pVk, IC28x, IC28y, calldataload(add(pubSignals, 864)))

        g1_mulAccC(_pVk, IC29x, IC29y, calldataload(add(pubSignals, 896)))

        g1_mulAccC(_pVk, IC30x, IC30y, calldataload(add(pubSignals, 928)))

        g1_mulAccC(_pVk, IC31x, IC31y, calldataload(add(pubSignals, 960)))

        g1_mulAccC(_pVk, IC32x, IC32y, calldataload(add(pubSignals, 992)))

        g1_mulAccC(_pVk, IC33x, IC33y, calldataload(add(pubSignals, 1024)))

        g1_mulAccC(_pVk, IC34x, IC34y, calldataload(add(pubSignals, 1056)))

        g1_mulAccC(_pVk, IC35x, IC35y, calldataload(add(pubSignals, 1088)))

        g1_mulAccC(_pVk, IC36x, IC36y, calldataload(add(pubSignals, 1120)))

        g1_mulAccC(_pVk, IC37x, IC37y, calldataload(add(pubSignals, 1152)))

        g1_mulAccC(_pVk, IC38x, IC38y, calldataload(add(pubSignals, 1184)))

        g1_mulAccC(_pVk, IC39x, IC39y, calldataload(add(pubSignals, 1216)))

        g1_mulAccC(_pVk, IC40x, IC40y, calldataload(add(pubSignals, 1248)))

        g1_mulAccC(_pVk, IC41x, IC41y, calldataload(add(pubSignals, 1280)))

        g1_mulAccC(_pVk, IC42x, IC42y, calldataload(add(pubSignals, 1312)))

        g1_mulAccC(_pVk, IC43x, IC43y, calldataload(add(pubSignals, 1344)))

        g1_mulAccC(_pVk, IC44x, IC44y, calldataload(add(pubSignals, 1376)))

        g1_mulAccC(_pVk, IC45x, IC45y, calldataload(add(pubSignals, 1408)))

        g1_mulAccC(_pVk, IC46x, IC46y, calldataload(add(pubSignals, 1440)))

        g1_mulAccC(_pVk, IC47x, IC47y, calldataload(add(pubSignals, 1472)))

        g1_mulAccC(_pVk, IC48x, IC48y, calldataload(add(pubSignals, 1504)))

        g1_mulAccC(_pVk, IC49x, IC49y, calldataload(add(pubSignals, 1536)))

        g1_mulAccC(_pVk, IC50x, IC50y, calldataload(add(pubSignals, 1568)))

        g1_mulAccC(_pVk, IC51x, IC51y, calldataload(add(pubSignals, 1600)))

        g1_mulAccC(_pVk, IC52x, IC52y, calldataload(add(pubSignals, 1632)))

        g1_mulAccC(_pVk, IC53x, IC53y, calldataload(add(pubSignals, 1664)))

        g1_mulAccC(_pVk, IC54x, IC54y, calldataload(add(pubSignals, 1696)))

        g1_mulAccC(_pVk, IC55x, IC55y, calldataload(add(pubSignals, 1728)))

        g1_mulAccC(_pVk, IC56x, IC56y, calldataload(add(pubSignals, 1760)))

        g1_mulAccC(_pVk, IC57x, IC57y, calldataload(add(pubSignals, 1792)))

        g1_mulAccC(_pVk, IC58x, IC58y, calldataload(add(pubSignals, 1824)))

        g1_mulAccC(_pVk, IC59x, IC59y, calldataload(add(pubSignals, 1856)))

        g1_mulAccC(_pVk, IC60x, IC60y, calldataload(add(pubSignals, 1888)))

        g1_mulAccC(_pVk, IC61x, IC61y, calldataload(add(pubSignals, 1920)))

        g1_mulAccC(_pVk, IC62x, IC62y, calldataload(add(pubSignals, 1952)))

        g1_mulAccC(_pVk, IC63x, IC63y, calldataload(add(pubSignals, 1984)))

        g1_mulAccC(_pVk, IC64x, IC64y, calldataload(add(pubSignals, 2016)))

        g1_mulAccC(_pVk, IC65x, IC65y, calldataload(add(pubSignals, 2048)))

        g1_mulAccC(_pVk, IC66x, IC66y, calldataload(add(pubSignals, 2080)))

        g1_mulAccC(_pVk, IC67x, IC67y, calldataload(add(pubSignals, 2112)))

        g1_mulAccC(_pVk, IC68x, IC68y, calldataload(add(pubSignals, 2144)))

        g1_mulAccC(_pVk, IC69x, IC69y, calldataload(add(pubSignals, 2176)))

        g1_mulAccC(_pVk, IC70x, IC70y, calldataload(add(pubSignals, 2208)))

        g1_mulAccC(_pVk, IC71x, IC71y, calldataload(add(pubSignals, 2240)))

        g1_mulAccC(_pVk, IC72x, IC72y, calldataload(add(pubSignals, 2272)))

        g1_mulAccC(_pVk, IC73x, IC73y, calldataload(add(pubSignals, 2304)))

        g1_mulAccC(_pVk, IC74x, IC74y, calldataload(add(pubSignals, 2336)))

        g1_mulAccC(_pVk, IC75x, IC75y, calldataload(add(pubSignals, 2368)))

        g1_mulAccC(_pVk, IC76x, IC76y, calldataload(add(pubSignals, 2400)))

        g1_mulAccC(_pVk, IC77x, IC77y, calldataload(add(pubSignals, 2432)))

        g1_mulAccC(_pVk, IC78x, IC78y, calldataload(add(pubSignals, 2464)))

        g1_mulAccC(_pVk, IC79x, IC79y, calldataload(add(pubSignals, 2496)))

        g1_mulAccC(_pVk, IC80x, IC80y, calldataload(add(pubSignals, 2528)))

        g1_mulAccC(_pVk, IC81x, IC81y, calldataload(add(pubSignals, 2560)))

        g1_mulAccC(_pVk, IC82x, IC82y, calldataload(add(pubSignals, 2592)))

        g1_mulAccC(_pVk, IC83x, IC83y, calldataload(add(pubSignals, 2624)))

        g1_mulAccC(_pVk, IC84x, IC84y, calldataload(add(pubSignals, 2656)))

        g1_mulAccC(_pVk, IC85x, IC85y, calldataload(add(pubSignals, 2688)))

        g1_mulAccC(_pVk, IC86x, IC86y, calldataload(add(pubSignals, 2720)))

        g1_mulAccC(_pVk, IC87x, IC87y, calldataload(add(pubSignals, 2752)))

        g1_mulAccC(_pVk, IC88x, IC88y, calldataload(add(pubSignals, 2784)))

        g1_mulAccC(_pVk, IC89x, IC89y, calldataload(add(pubSignals, 2816)))

        g1_mulAccC(_pVk, IC90x, IC90y, calldataload(add(pubSignals, 2848)))

        g1_mulAccC(_pVk, IC91x, IC91y, calldataload(add(pubSignals, 2880)))

        g1_mulAccC(_pVk, IC92x, IC92y, calldataload(add(pubSignals, 2912)))

        g1_mulAccC(_pVk, IC93x, IC93y, calldataload(add(pubSignals, 2944)))

        g1_mulAccC(_pVk, IC94x, IC94y, calldataload(add(pubSignals, 2976)))

        g1_mulAccC(_pVk, IC95x, IC95y, calldataload(add(pubSignals, 3008)))

        g1_mulAccC(_pVk, IC96x, IC96y, calldataload(add(pubSignals, 3040)))

        g1_mulAccC(_pVk, IC97x, IC97y, calldataload(add(pubSignals, 3072)))

        g1_mulAccC(_pVk, IC98x, IC98y, calldataload(add(pubSignals, 3104)))

        g1_mulAccC(_pVk, IC99x, IC99y, calldataload(add(pubSignals, 3136)))

        g1_mulAccC(_pVk, IC100x, IC100y, calldataload(add(pubSignals, 3168)))

        g1_mulAccC(_pVk, IC101x, IC101y, calldataload(add(pubSignals, 3200)))

        g1_mulAccC(_pVk, IC102x, IC102y, calldataload(add(pubSignals, 3232)))

        g1_mulAccC(_pVk, IC103x, IC103y, calldataload(add(pubSignals, 3264)))

        g1_mulAccC(_pVk, IC104x, IC104y, calldataload(add(pubSignals, 3296)))

        g1_mulAccC(_pVk, IC105x, IC105y, calldataload(add(pubSignals, 3328)))

        g1_mulAccC(_pVk, IC106x, IC106y, calldataload(add(pubSignals, 3360)))

        g1_mulAccC(_pVk, IC107x, IC107y, calldataload(add(pubSignals, 3392)))

        g1_mulAccC(_pVk, IC108x, IC108y, calldataload(add(pubSignals, 3424)))

        g1_mulAccC(_pVk, IC109x, IC109y, calldataload(add(pubSignals, 3456)))

        g1_mulAccC(_pVk, IC110x, IC110y, calldataload(add(pubSignals, 3488)))

        g1_mulAccC(_pVk, IC111x, IC111y, calldataload(add(pubSignals, 3520)))

        g1_mulAccC(_pVk, IC112x, IC112y, calldataload(add(pubSignals, 3552)))

        g1_mulAccC(_pVk, IC113x, IC113y, calldataload(add(pubSignals, 3584)))

        g1_mulAccC(_pVk, IC114x, IC114y, calldataload(add(pubSignals, 3616)))

        g1_mulAccC(_pVk, IC115x, IC115y, calldataload(add(pubSignals, 3648)))

        g1_mulAccC(_pVk, IC116x, IC116y, calldataload(add(pubSignals, 3680)))

        g1_mulAccC(_pVk, IC117x, IC117y, calldataload(add(pubSignals, 3712)))

        g1_mulAccC(_pVk, IC118x, IC118y, calldataload(add(pubSignals, 3744)))

        g1_mulAccC(_pVk, IC119x, IC119y, calldataload(add(pubSignals, 3776)))

        g1_mulAccC(_pVk, IC120x, IC120y, calldataload(add(pubSignals, 3808)))

        g1_mulAccC(_pVk, IC121x, IC121y, calldataload(add(pubSignals, 3840)))

        g1_mulAccC(_pVk, IC122x, IC122y, calldataload(add(pubSignals, 3872)))

        g1_mulAccC(_pVk, IC123x, IC123y, calldataload(add(pubSignals, 3904)))

        g1_mulAccC(_pVk, IC124x, IC124y, calldataload(add(pubSignals, 3936)))

        g1_mulAccC(_pVk, IC125x, IC125y, calldataload(add(pubSignals, 3968)))

        g1_mulAccC(_pVk, IC126x, IC126y, calldataload(add(pubSignals, 4000)))

        g1_mulAccC(_pVk, IC127x, IC127y, calldataload(add(pubSignals, 4032)))

        g1_mulAccC(_pVk, IC128x, IC128y, calldataload(add(pubSignals, 4064)))

        g1_mulAccC(_pVk, IC129x, IC129y, calldataload(add(pubSignals, 4096)))

        g1_mulAccC(_pVk, IC130x, IC130y, calldataload(add(pubSignals, 4128)))

        g1_mulAccC(_pVk, IC131x, IC131y, calldataload(add(pubSignals, 4160)))

        g1_mulAccC(_pVk, IC132x, IC132y, calldataload(add(pubSignals, 4192)))

        g1_mulAccC(_pVk, IC133x, IC133y, calldataload(add(pubSignals, 4224)))

        g1_mulAccC(_pVk, IC134x, IC134y, calldataload(add(pubSignals, 4256)))

        g1_mulAccC(_pVk, IC135x, IC135y, calldataload(add(pubSignals, 4288)))

        g1_mulAccC(_pVk, IC136x, IC136y, calldataload(add(pubSignals, 4320)))

        g1_mulAccC(_pVk, IC137x, IC137y, calldataload(add(pubSignals, 4352)))

        g1_mulAccC(_pVk, IC138x, IC138y, calldataload(add(pubSignals, 4384)))

        g1_mulAccC(_pVk, IC139x, IC139y, calldataload(add(pubSignals, 4416)))

        g1_mulAccC(_pVk, IC140x, IC140y, calldataload(add(pubSignals, 4448)))

        g1_mulAccC(_pVk, IC141x, IC141y, calldataload(add(pubSignals, 4480)))

        g1_mulAccC(_pVk, IC142x, IC142y, calldataload(add(pubSignals, 4512)))

        g1_mulAccC(_pVk, IC143x, IC143y, calldataload(add(pubSignals, 4544)))

        g1_mulAccC(_pVk, IC144x, IC144y, calldataload(add(pubSignals, 4576)))

        g1_mulAccC(_pVk, IC145x, IC145y, calldataload(add(pubSignals, 4608)))

        g1_mulAccC(_pVk, IC146x, IC146y, calldataload(add(pubSignals, 4640)))

        g1_mulAccC(_pVk, IC147x, IC147y, calldataload(add(pubSignals, 4672)))

        g1_mulAccC(_pVk, IC148x, IC148y, calldataload(add(pubSignals, 4704)))

        g1_mulAccC(_pVk, IC149x, IC149y, calldataload(add(pubSignals, 4736)))

        g1_mulAccC(_pVk, IC150x, IC150y, calldataload(add(pubSignals, 4768)))

        g1_mulAccC(_pVk, IC151x, IC151y, calldataload(add(pubSignals, 4800)))

        // -A
        mstore(_pPairing, calldataload(pA))
        mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))

        // B
        mstore(add(_pPairing, 64), calldataload(pB))
        mstore(add(_pPairing, 96), calldataload(add(pB, 32)))
        mstore(add(_pPairing, 128), calldataload(add(pB, 64)))
        mstore(add(_pPairing, 160), calldataload(add(pB, 96)))

        // alpha1
        mstore(add(_pPairing, 192), alphax)
        mstore(add(_pPairing, 224), alphay)

        // beta2
        mstore(add(_pPairing, 256), betax1)
        mstore(add(_pPairing, 288), betax2)
        mstore(add(_pPairing, 320), betay1)
        mstore(add(_pPairing, 352), betay2)

        // vk_x
        mstore(add(_pPairing, 384), mload(add(pMem, pVk)))
        mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))

        // gamma2
        mstore(add(_pPairing, 448), gammax1)
        mstore(add(_pPairing, 480), gammax2)
        mstore(add(_pPairing, 512), gammay1)
        mstore(add(_pPairing, 544), gammay2)

        // C
        mstore(add(_pPairing, 576), calldataload(pC))
        mstore(add(_pPairing, 608), calldataload(add(pC, 32)))

        // delta2
        mstore(add(_pPairing, 640), deltax1)
        mstore(add(_pPairing, 672), deltax2)
        mstore(add(_pPairing, 704), deltay1)
        mstore(add(_pPairing, 736), deltay2)

        let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)

        isOk := and(success, mload(_pPairing))
      }

      let pMem := mload(0x40)
      mstore(0x40, add(pMem, pLastMem))

      // Validate that all evaluations ∈ F

      checkField(calldataload(add(_pubSignals, 0)))

      checkField(calldataload(add(_pubSignals, 32)))

      checkField(calldataload(add(_pubSignals, 64)))

      checkField(calldataload(add(_pubSignals, 96)))

      checkField(calldataload(add(_pubSignals, 128)))

      checkField(calldataload(add(_pubSignals, 160)))

      checkField(calldataload(add(_pubSignals, 192)))

      checkField(calldataload(add(_pubSignals, 224)))

      checkField(calldataload(add(_pubSignals, 256)))

      checkField(calldataload(add(_pubSignals, 288)))

      checkField(calldataload(add(_pubSignals, 320)))

      checkField(calldataload(add(_pubSignals, 352)))

      checkField(calldataload(add(_pubSignals, 384)))

      checkField(calldataload(add(_pubSignals, 416)))

      checkField(calldataload(add(_pubSignals, 448)))

      checkField(calldataload(add(_pubSignals, 480)))

      checkField(calldataload(add(_pubSignals, 512)))

      checkField(calldataload(add(_pubSignals, 544)))

      checkField(calldataload(add(_pubSignals, 576)))

      checkField(calldataload(add(_pubSignals, 608)))

      checkField(calldataload(add(_pubSignals, 640)))

      checkField(calldataload(add(_pubSignals, 672)))

      checkField(calldataload(add(_pubSignals, 704)))

      checkField(calldataload(add(_pubSignals, 736)))

      checkField(calldataload(add(_pubSignals, 768)))

      checkField(calldataload(add(_pubSignals, 800)))

      checkField(calldataload(add(_pubSignals, 832)))

      checkField(calldataload(add(_pubSignals, 864)))

      checkField(calldataload(add(_pubSignals, 896)))

      checkField(calldataload(add(_pubSignals, 928)))

      checkField(calldataload(add(_pubSignals, 960)))

      checkField(calldataload(add(_pubSignals, 992)))

      checkField(calldataload(add(_pubSignals, 1024)))

      checkField(calldataload(add(_pubSignals, 1056)))

      checkField(calldataload(add(_pubSignals, 1088)))

      checkField(calldataload(add(_pubSignals, 1120)))

      checkField(calldataload(add(_pubSignals, 1152)))

      checkField(calldataload(add(_pubSignals, 1184)))

      checkField(calldataload(add(_pubSignals, 1216)))

      checkField(calldataload(add(_pubSignals, 1248)))

      checkField(calldataload(add(_pubSignals, 1280)))

      checkField(calldataload(add(_pubSignals, 1312)))

      checkField(calldataload(add(_pubSignals, 1344)))

      checkField(calldataload(add(_pubSignals, 1376)))

      checkField(calldataload(add(_pubSignals, 1408)))

      checkField(calldataload(add(_pubSignals, 1440)))

      checkField(calldataload(add(_pubSignals, 1472)))

      checkField(calldataload(add(_pubSignals, 1504)))

      checkField(calldataload(add(_pubSignals, 1536)))

      checkField(calldataload(add(_pubSignals, 1568)))

      checkField(calldataload(add(_pubSignals, 1600)))

      checkField(calldataload(add(_pubSignals, 1632)))

      checkField(calldataload(add(_pubSignals, 1664)))

      checkField(calldataload(add(_pubSignals, 1696)))

      checkField(calldataload(add(_pubSignals, 1728)))

      checkField(calldataload(add(_pubSignals, 1760)))

      checkField(calldataload(add(_pubSignals, 1792)))

      checkField(calldataload(add(_pubSignals, 1824)))

      checkField(calldataload(add(_pubSignals, 1856)))

      checkField(calldataload(add(_pubSignals, 1888)))

      checkField(calldataload(add(_pubSignals, 1920)))

      checkField(calldataload(add(_pubSignals, 1952)))

      checkField(calldataload(add(_pubSignals, 1984)))

      checkField(calldataload(add(_pubSignals, 2016)))

      checkField(calldataload(add(_pubSignals, 2048)))

      checkField(calldataload(add(_pubSignals, 2080)))

      checkField(calldataload(add(_pubSignals, 2112)))

      checkField(calldataload(add(_pubSignals, 2144)))

      checkField(calldataload(add(_pubSignals, 2176)))

      checkField(calldataload(add(_pubSignals, 2208)))

      checkField(calldataload(add(_pubSignals, 2240)))

      checkField(calldataload(add(_pubSignals, 2272)))

      checkField(calldataload(add(_pubSignals, 2304)))

      checkField(calldataload(add(_pubSignals, 2336)))

      checkField(calldataload(add(_pubSignals, 2368)))

      checkField(calldataload(add(_pubSignals, 2400)))

      checkField(calldataload(add(_pubSignals, 2432)))

      checkField(calldataload(add(_pubSignals, 2464)))

      checkField(calldataload(add(_pubSignals, 2496)))

      checkField(calldataload(add(_pubSignals, 2528)))

      checkField(calldataload(add(_pubSignals, 2560)))

      checkField(calldataload(add(_pubSignals, 2592)))

      checkField(calldataload(add(_pubSignals, 2624)))

      checkField(calldataload(add(_pubSignals, 2656)))

      checkField(calldataload(add(_pubSignals, 2688)))

      checkField(calldataload(add(_pubSignals, 2720)))

      checkField(calldataload(add(_pubSignals, 2752)))

      checkField(calldataload(add(_pubSignals, 2784)))

      checkField(calldataload(add(_pubSignals, 2816)))

      checkField(calldataload(add(_pubSignals, 2848)))

      checkField(calldataload(add(_pubSignals, 2880)))

      checkField(calldataload(add(_pubSignals, 2912)))

      checkField(calldataload(add(_pubSignals, 2944)))

      checkField(calldataload(add(_pubSignals, 2976)))

      checkField(calldataload(add(_pubSignals, 3008)))

      checkField(calldataload(add(_pubSignals, 3040)))

      checkField(calldataload(add(_pubSignals, 3072)))

      checkField(calldataload(add(_pubSignals, 3104)))

      checkField(calldataload(add(_pubSignals, 3136)))

      checkField(calldataload(add(_pubSignals, 3168)))

      checkField(calldataload(add(_pubSignals, 3200)))

      checkField(calldataload(add(_pubSignals, 3232)))

      checkField(calldataload(add(_pubSignals, 3264)))

      checkField(calldataload(add(_pubSignals, 3296)))

      checkField(calldataload(add(_pubSignals, 3328)))

      checkField(calldataload(add(_pubSignals, 3360)))

      checkField(calldataload(add(_pubSignals, 3392)))

      checkField(calldataload(add(_pubSignals, 3424)))

      checkField(calldataload(add(_pubSignals, 3456)))

      checkField(calldataload(add(_pubSignals, 3488)))

      checkField(calldataload(add(_pubSignals, 3520)))

      checkField(calldataload(add(_pubSignals, 3552)))

      checkField(calldataload(add(_pubSignals, 3584)))

      checkField(calldataload(add(_pubSignals, 3616)))

      checkField(calldataload(add(_pubSignals, 3648)))

      checkField(calldataload(add(_pubSignals, 3680)))

      checkField(calldataload(add(_pubSignals, 3712)))

      checkField(calldataload(add(_pubSignals, 3744)))

      checkField(calldataload(add(_pubSignals, 3776)))

      checkField(calldataload(add(_pubSignals, 3808)))

      checkField(calldataload(add(_pubSignals, 3840)))

      checkField(calldataload(add(_pubSignals, 3872)))

      checkField(calldataload(add(_pubSignals, 3904)))

      checkField(calldataload(add(_pubSignals, 3936)))

      checkField(calldataload(add(_pubSignals, 3968)))

      checkField(calldataload(add(_pubSignals, 4000)))

      checkField(calldataload(add(_pubSignals, 4032)))

      checkField(calldataload(add(_pubSignals, 4064)))

      checkField(calldataload(add(_pubSignals, 4096)))

      checkField(calldataload(add(_pubSignals, 4128)))

      checkField(calldataload(add(_pubSignals, 4160)))

      checkField(calldataload(add(_pubSignals, 4192)))

      checkField(calldataload(add(_pubSignals, 4224)))

      checkField(calldataload(add(_pubSignals, 4256)))

      checkField(calldataload(add(_pubSignals, 4288)))

      checkField(calldataload(add(_pubSignals, 4320)))

      checkField(calldataload(add(_pubSignals, 4352)))

      checkField(calldataload(add(_pubSignals, 4384)))

      checkField(calldataload(add(_pubSignals, 4416)))

      checkField(calldataload(add(_pubSignals, 4448)))

      checkField(calldataload(add(_pubSignals, 4480)))

      checkField(calldataload(add(_pubSignals, 4512)))

      checkField(calldataload(add(_pubSignals, 4544)))

      checkField(calldataload(add(_pubSignals, 4576)))

      checkField(calldataload(add(_pubSignals, 4608)))

      checkField(calldataload(add(_pubSignals, 4640)))

      checkField(calldataload(add(_pubSignals, 4672)))

      checkField(calldataload(add(_pubSignals, 4704)))

      checkField(calldataload(add(_pubSignals, 4736)))

      checkField(calldataload(add(_pubSignals, 4768)))

      checkField(calldataload(add(_pubSignals, 4800)))

      // Validate all evaluations
      let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)

      mstore(0, isValid)
      return(0, 0x20)
    }
  }
}
