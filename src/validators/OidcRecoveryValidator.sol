// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.24;

import { Transaction } from "@matterlabs/zksync-contracts/l2/system-contracts/libraries/TransactionHelper.sol";
import { IERC165 } from "@openzeppelin/contracts/utils/introspection/IERC165.sol";
import { Initializable } from "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";

import { WebAuthValidator } from "./WebAuthValidator.sol";
import { IModuleValidator } from "../interfaces/IModuleValidator.sol";
import { IModule } from "../interfaces/IModule.sol";
import { VerifierCaller } from "../helpers/VerifierCaller.sol";
import { OidcKeyRegistry } from "../OidcKeyRegistry.sol";
import { Groth16Verifier } from "../autogenerated/JwtTxValidationVerifier.sol";

/// @title OidcRecoveryValidator
/// @author Matter Labs
/// @custom:security-contact security@matterlabs.dev
/// @dev This contract allows secure user authentication using OIDC protocol.
contract OidcRecoveryValidator is VerifierCaller, IModuleValidator, Initializable {
  /// @notice The number of public inputs for the zk proof.
  uint8 constant PUB_SIGNALS_LENGTH = 20;

  /// @notice Emitted when an OIDC key is updated.
  /// @param account The address of the account that updated the OIDC key.
  /// @param oidcDigest The PoseidonHash(sub || aud || iss || salt) of the OIDC key.
  /// @param iss The OIDC issuer.
  /// @param isNew True if the OIDC key is new, false if it is an update.
  event OidcKeyUpdated(address indexed account, bytes32 oidcDigest, string iss, bool isNew);

  /// @notice Emitted when an OIDC account is deleted.
  /// @param account The address of the account that deleted the OIDC account.
  /// @param oidcDigest The PoseidonHash(sub || aud || iss || salt) of the OIDC key.
  event OidcAccountDeleted(address indexed account, bytes32 oidcDigest);

  /// @notice Thrown when calling `validateSignature` since it is not implemented.
  error ValidateSignatureNotImplemented();

  /// @notice Thrown when an address is not found for a given OIDC digest.
  /// @param digest The OIDC digest.
  error AddressNotFoundForDigest(bytes32 digest);

  /// @notice Thrown when trying to add an OIDC account with an OIDC digest that is already registered in another account.
  /// @param digest The OIDC digest.
  error OidcDigestAlreadyRegisteredInAnotherAccount(bytes32 digest);

  /// @notice Thrown when there is no OIDC data for a given address.
  /// @param account The address.
  error NoOidcDataForGivenAddress(address account);

  /// @notice Thrown when the zk proof verification fails.
  error ZkProofVerificationFailed();

  /// @notice Thrown when the web authentication validator address is invalid.
  /// @param expectedValidator The expected address of the web authentication validator.
  /// @param validator The address of the web authentication validator.
  error InvalidWebAuthnValidatorAddress(address expectedValidator, address validator);

  /// @notice Thrown when the transaction to address overflows.
  error TransactionToOverflow();

  /// @notice Thrown when trying to validate a non-function call transaction.
  error OnlyFunctionCallsSupported();

  /// @notice Thrown when trying to validate a transaction that does not call `addValidationKey` on the `WebAuthValidator` contract.
  /// @param expectedSelector The expected selector of the `addValidationKey` function.
  /// @param actualSelector The actual selector of the function being called.
  error UnauthorizedFunctionCall(bytes4 expectedSelector, bytes4 actualSelector);

  /// @notice Thrown when the passkey hash is invalid.
  /// @param expectedHash The expected passkey hash.
  /// @param actualHash The actual passkey hash.
  error InvalidPasskeyHash(bytes32 expectedHash, bytes32 actualHash);

  /// @notice Thrown when the account is not ready to recover.
  error NotReadyToRecover();

  /// @notice Thrown when the time limit has expired.
  error TimeLimitExpired();

  /// @notice The data for an OIDC account.
  /// @param oidcDigest Digest that identifies an account. It's calculated as: PoseidonHash(sub || aud || iss || salt) of the OIDC key.
  /// @param iss The OIDC issuer.
  /// @param readyToRecover Indicating if recovery is active (true after `startRecovery` and false once recovery is completed).
  /// @param pendingPasskeyHash The hash of the pending passkey.
  /// @param recoverNonce The value is used to build the jwt nonce, and gets incremented each time a zk proof is successfully verified to prevent replay attacks.
  /// @param addedOn The timestamp when the OIDC account was added.
  struct OidcData {
    bytes32 oidcDigest;
    string iss;
    bool readyToRecover;
    bytes32 pendingPasskeyHash;
    uint256 recoverNonce;
    uint256 addedOn;
  }

  /// @notice Data needed to associate a new oidc account to an sso account.
  /// @param oidcDigest The PoseidonHash(sub || aud || iss || salt) of the OIDC key.
  /// @param iss The OIDC issuer. See https://openid.net/specs/openid-connect-core-1_0.html#IDToken
  struct OidcCreationData {
    bytes32 oidcDigest;
    string iss;
  }

  /// @notice The data for a zk proof.
  struct ZkProof {
    uint[2] pA;
    uint[2][2] pB;
    uint[2] pC;
  }

  /// @notice The data for starting a recovery process.
  /// @param zkProof The zk proof.
  /// @param issHash The hash of the OIDC issuer.
  /// @param kid The key id (kid) of the OIDC key.
  /// @param pendingPasskeyHash The hash of the pending passkey to be added.
  struct StartRecoveryData {
    ZkProof zkProof;
    bytes32 issHash;
    bytes32 kid;
    bytes32 pendingPasskeyHash;
  }

  /// @notice The mapping of account addresses to their OIDC data.
  mapping(address account => OidcData oidcData) accountData;

  /// @notice The mapping of OIDC digests to their corresponding account addresses.
  mapping(bytes32 oidcDigest => address account) digestIndex;

  /// @notice The address of the OIDC key registry.
  address public keyRegistry;

  /// @notice The address of the zk verifier.
  address public verifier;

  /// @notice The address of the web authentication validator.
  address public webAuthValidator;

  constructor() {
    _disableInitializers();
  }

  /// @notice Initializes the validator.
  /// @param _keyRegistry The address of the OIDC key registry.
  /// @param _verifier The address of the zk verifier.
  /// @param _webAuthValidator The address of the web authentication validator.
  function initialize(address _keyRegistry, address _verifier, address _webAuthValidator) public initializer {
    keyRegistry = _keyRegistry;
    verifier = _verifier;
    webAuthValidator = _webAuthValidator;
  }

  /// @notice Runs on module install
  /// @param data ABI-encoded OidcCreationData key to add immediately, or empty if not needed
  function onInstall(bytes calldata data) external override {
    if (data.length > 0) {
      OidcCreationData memory oidcCreationData = abi.decode(data, (OidcCreationData));
      addOidcAccount(oidcCreationData.oidcDigest, oidcCreationData.iss);
    }
  }

  /// @notice Runs on module uninstall
  /// @dev Deletes the OIDC account for the caller.
  /// @param data unused
  function onUninstall(bytes calldata data) external override {
    _deleteOidcAccount();
  }

  /// @notice Adds an `OidcData` for the caller.
  /// @param oidcDigest PoseidonHash(sub || aud || iss || salt).
  /// @param iss The OIDC issuer.
  /// @return true if the key was added, false if it was updated.
  function addOidcAccount(bytes32 oidcDigest, string memory iss) public returns (bool) {
    bool isNew = accountData[msg.sender].oidcDigest.length == 0;
    if (digestIndex[oidcDigest] != address(0)) {
      revert OidcDigestAlreadyRegisteredInAnotherAccount(oidcDigest);
    }

    accountData[msg.sender].oidcDigest = oidcDigest;
    accountData[msg.sender].iss = iss;
    accountData[msg.sender].addedOn = block.timestamp;
    digestIndex[oidcDigest] = msg.sender;

    emit OidcKeyUpdated(msg.sender, oidcDigest, iss, isNew);
    return isNew;
  }

  /// @notice Deletes the OIDC account for the caller.
  function deleteOidcAccount() external {
    _deleteOidcAccount();
  }

  /// @dev Deletes the OIDC account for the caller.
  function _deleteOidcAccount() private {
    bytes32 digest = accountData[msg.sender].oidcDigest;
    delete digestIndex[digest];
    delete accountData[msg.sender];

    emit OidcAccountDeleted(msg.sender, digest);
  }

  /// @notice Starts the recovery process for the target account.
  /// @param data The data for starting a recovery process.
  /// @param targetAccount The address of the account to start the recovery process for.
  /// @param timeLimit The time limit for the recovery process.
  /// @dev Queries the OIDC key registry for the provider's public key (`pkop`).
  /// @dev Calls the verifier contract to validate the zk proof.
  /// @dev If the proof is valid, it sets the recovery data for the target account.
  function startRecovery(StartRecoveryData calldata data, address targetAccount, uint256 timeLimit) external {
    if (timeLimit < block.timestamp) {
      revert TimeLimitExpired();
    }

    OidcKeyRegistry keyRegistryContract = OidcKeyRegistry(keyRegistry);
    Groth16Verifier verifierContract = Groth16Verifier(verifier);

    OidcData memory oidcData = accountData[targetAccount];
    OidcKeyRegistry.Key memory key = keyRegistryContract.getKey(data.issHash, data.kid);

    bytes32 senderHash = keccak256(abi.encode(msg.sender, oidcData.recoverNonce, timeLimit));

    // Fill public inputs
    uint8 index = 0;
    uint[PUB_SIGNALS_LENGTH] memory publicInputs;

    for (uint8 i = 0; i < key.n.length; i++) {
      publicInputs[index] = uint(key.n[i]);
      index++;
    }

    publicInputs[index] = uint(oidcData.oidcDigest);
    index++;

    // Add tx hash split into two 31-byte chunks (fields)
    // Reverse ensures correct little-endian representation
    publicInputs[index] = _reverse(uint256(senderHash) >> 8) >> 8;
    index++;
    publicInputs[index] = (uint256(senderHash) << 248) >> 248;

    if (!verifierContract.verifyProof(data.zkProof.pA, data.zkProof.pB, data.zkProof.pC, publicInputs)) {
      revert ZkProofVerificationFailed();
    }

    accountData[targetAccount].pendingPasskeyHash = data.pendingPasskeyHash;
    accountData[targetAccount].recoverNonce++;
    accountData[targetAccount].readyToRecover = true;
  }

  /// @notice Validates a transaction to add a new passkey for the user.
  /// @dev Only allows calls to `addValidationKey` on the `WebAuthValidator` contract.
  /// @dev Validates that the transaction adds the pending passkey to the account.
  /// @param signedHash unused
  /// @param transaction The transaction data being validated.
  /// @return true if the transaction is valid and authorized, false otherwise.
  function validateTransaction(bytes32 signedHash, Transaction calldata transaction) external returns (bool) {
    if (transaction.to > type(uint160).max) {
      revert TransactionToOverflow();
    }
    if (address(uint160(transaction.to)) != webAuthValidator) {
      revert InvalidWebAuthnValidatorAddress(webAuthValidator, address(uint160(transaction.to)));
    }

    if (transaction.data.length < 4) {
      revert OnlyFunctionCallsSupported();
    }

    bytes4 selector = bytes4(transaction.data[:4]);

    // Check for calling "addValidationKey" method by anyone on WebAuthValidator contract
    if (selector != WebAuthValidator.addValidationKey.selector) {
      revert UnauthorizedFunctionCall(WebAuthValidator.addValidationKey.selector, selector);
    }

    // Decode the key from the transaction data and check against the pending passkey hash
    (, bytes32[2] memory newPasskeyPubKey, ) = abi.decode(transaction.data[4:], (bytes, bytes32[2], string));
    bytes32 passkeyHash = keccak256(abi.encode(newPasskeyPubKey[0], newPasskeyPubKey[1]));
    OidcData memory oidcData = accountData[msg.sender];

    if (oidcData.pendingPasskeyHash != passkeyHash) {
      revert InvalidPasskeyHash(oidcData.pendingPasskeyHash, passkeyHash);
    }
    if (!oidcData.readyToRecover) {
      revert NotReadyToRecover();
    }

    // Reset pending passkey hash
    accountData[msg.sender].pendingPasskeyHash = bytes32(0);
    accountData[msg.sender].readyToRecover = false;

    return true;
  }

  /// @notice Unimplemented because signature validation is not required.
  /// @dev We only need `validateTransaction` to add new passkeys, so this function is intentionally left unimplemented.
  function validateSignature(bytes32 signedHash, bytes memory signature) external view returns (bool) {
    revert ValidateSignatureNotImplemented();
  }

  /// @inheritdoc IERC165
  function supportsInterface(bytes4 interfaceId) public pure override returns (bool) {
    return
      interfaceId == type(IERC165).interfaceId ||
      interfaceId == type(IModuleValidator).interfaceId ||
      interfaceId == type(IModule).interfaceId;
  }

  /// @notice Returns the address for a given OIDC digest.
  /// @param digest The OIDC digest.
  /// @return account The address for the given OIDC digest.
  function addressForDigest(bytes32 digest) public view returns (address) {
    address addr = digestIndex[digest];
    if (addr == address(0)) {
      revert AddressNotFoundForDigest(digest);
    }

    return digestIndex[digest];
  }

  /// @notice Returns the OIDC data for a given address.
  /// @param account The address to get the OIDC data for.
  /// @return data The OIDC data for the given address.
  function oidcDataForAddress(address account) public view returns (OidcData memory) {
    OidcData memory data = accountData[account];

    if (data.oidcDigest == bytes32(0)) {
      revert NoOidcDataForGivenAddress(account);
    }

    return data;
  }

  /// @notice Reverses the byte order of a given uint256.
  /// @dev Algorithm taken from https://graphics.stanford.edu/%7Eseander/bithacks.html#ReverseParallel
  /// @param input The uint256 to reverse.
  /// @return v The reversed uint256.
  function _reverse(uint256 input) internal pure returns (uint256 v) {
    v = input;

    // swap bytes
    v =
      ((v & 0xFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00) >> 8) |
      ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);

    // swap 2-byte long pairs
    v =
      ((v & 0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000) >> 16) |
      ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);

    // swap 4-byte long pairs
    v =
      ((v & 0xFFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000) >> 32) |
      ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);

    // swap 8-byte long pairs
    v =
      ((v & 0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000) >> 64) |
      ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);

    // swap 16-byte long pairs
    v = (v >> 128) | (v << 128);
  }
}
